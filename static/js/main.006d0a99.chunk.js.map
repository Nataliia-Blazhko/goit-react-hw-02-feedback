{"version":3,"sources":["components/section/Section.js","components/notification/Notification.js","components/statistics/Statistics.js","components/feedback/FeedbackOptions.js","App.js","index.js"],"names":["Section","this","props","title","children","className","Component","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","map","option","onClick","onLeaveFeedback","App","state","increment","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","Object","keys","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAEaA,EAAb,4JACE,WACE,MAA4BC,KAAKC,MAAzBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACf,OACE,0BAASC,UAAU,UAAnB,UACE,oBAAIA,UAAU,QAAd,SAAuBF,IACtBC,SANT,GAA6BE,aCDhBC,EAAb,4JACE,WACE,OAAO,mBAAGF,UAAU,OAAb,SAAqBJ,KAAKC,MAAMM,cAF3C,GAAkCF,aCErBG,EAAb,4JACE,WACE,MAA0DR,KAAKC,MAAvDQ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBACnC,OAAOJ,GAAQC,GAAWC,EACxB,gCACE,oBAAGP,UAAU,OAAb,mBACQ,sBAAMA,UAAU,UAAhB,SAA2BK,IAAa,OAEhD,oBAAGL,UAAU,OAAb,sBACW,sBAAMA,UAAU,UAAhB,SAA2BM,OAEtC,oBAAGN,UAAU,OAAb,kBACO,sBAAMA,UAAU,UAAhB,SAA2BO,OAElC,oBAAGP,UAAU,OAAb,oBACS,sBAAMA,UAAU,UAAhB,SAA2BQ,SAEpC,oBAAGR,UAAU,OAAb,+BACqB,IACnB,uBAAMA,UAAU,UAAhB,UAA2BS,IAA3B,aAIJ,cAAC,EAAD,CAAcN,QAAQ,0BAvB5B,GAAgCF,aCDnBS,EAAb,4JACE,WAAU,IAAD,OACP,OACE,qBAAKV,UAAU,mBAAf,SACGJ,KAAKC,MAAMc,QAAQC,KAAI,SAACC,GACvB,OACE,wBAEEC,QAAS,kBAAM,EAAKjB,MAAMkB,gBAAgBF,IAC1Cb,UAAU,iBAHZ,SAKGa,GAJIA,YAPnB,GAAqCZ,aC+CtBe,G,kNA1CbC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPW,UAAY,SAACL,GACX,EAAKM,SAAL,eAAiBN,EAAS,EAAKI,MAAMJ,GAAU,K,EAGjDO,mBAAqB,kBACnB,EAAKH,MAAMZ,KAAO,EAAKY,MAAMX,QAAU,EAAKW,MAAMV,K,EAEpDc,gCAAkC,WAChC,IAAMb,EAAQ,EAAKY,qBACnB,OAAc,IAAVZ,EACK,EAEFc,KAAKC,MAAyB,IAAlB,EAAKN,MAAMZ,KAAcG,I,4CAG9C,WACE,IAAMG,EAAUa,OAAOC,KAAK7B,KAAKqB,OACjC,OACE,qCACE,cAAC,EAAD,CAASnB,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBa,QAASA,EAASI,gBAAiBnB,KAAKsB,cAE3D,cAAC,EAAD,CAASpB,MAAM,aAAf,SACE,cAAC,EAAD,CACEO,KAAMT,KAAKqB,MAAMZ,KACjBC,QAASV,KAAKqB,MAAMX,QACpBC,IAAKX,KAAKqB,MAAMV,IAChBC,MAAOZ,KAAKwB,mBACZX,mBAAoBb,KAAKyB,2C,GAnCnBpB,cCFlByB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.006d0a99.chunk.js","sourcesContent":["import { Component } from \"react\";\r\n\r\nexport class Section extends Component {\r\n  render() {\r\n    const { title, children } = this.props;\r\n    return (\r\n      <section className=\"section\">\r\n        <h2 className=\"title\">{title}</h2>\r\n        {children}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import { Component } from \"react\";\r\nexport class Notification extends Component {\r\n  render() {\r\n    return <p className=\"text\">{this.props.message}</p>;\r\n  }\r\n}\r\n","import { Component } from \"react\";\r\nimport { Notification } from \"../notification/Notification\";\r\n\r\nexport class Statistics extends Component {\r\n  render() {\r\n    const { good, neutral, bad, total, positivePercentage } = this.props;\r\n    return good || neutral || bad ? (\r\n      <div>\r\n        <p className=\"text\">\r\n          Good: <span className=\"numbers\">{good}</span>{\" \"}\r\n        </p>\r\n        <p className=\"text\">\r\n          Neutral: <span className=\"numbers\">{neutral}</span>\r\n        </p>\r\n        <p className=\"text\">\r\n          Bad: <span className=\"numbers\">{bad}</span>\r\n        </p>\r\n        <p className=\"text\">\r\n          Total: <span className=\"numbers\">{total()}</span>\r\n        </p>\r\n        <p className=\"text\">\r\n          Positive feedback:{\" \"}\r\n          <span className=\"numbers\">{positivePercentage()}%</span>\r\n        </p>\r\n      </div>\r\n    ) : (\r\n      <Notification message=\"No feedback given\" />\r\n    );\r\n  }\r\n}\r\n","import { Component } from \"react\";\r\n\r\nexport class FeedbackOptions extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"buttonsContainer\">\r\n        {this.props.options.map((option) => {\r\n          return (\r\n            <button\r\n              key={option}\r\n              onClick={() => this.props.onLeaveFeedback(option)}\r\n              className=\"feedBackButton\"\r\n            >\r\n              {option}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { Component } from \"react\";\nimport { Section } from \"./components/section/Section\";\nimport { Statistics } from \"./components/statistics/Statistics\";\nimport { FeedbackOptions } from \"./components/feedback/FeedbackOptions\";\nimport \"./styles.scss\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  increment = (option) => {\n    this.setState({ [option]: this.state[option] + 1 });\n  };\n\n  countTotalFeedback = () =>\n    this.state.good + this.state.neutral + this.state.bad;\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    if (total === 0) {\n      return 0;\n    }\n    return Math.round((this.state.good * 100) / total);\n  };\n\n  render() {\n    const options = Object.keys(this.state);\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={options} onLeaveFeedback={this.increment} />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={this.countTotalFeedback}\n            positivePercentage={this.countPositiveFeedbackPercentage}\n          ></Statistics>\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}