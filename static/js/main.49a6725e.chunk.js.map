{"version":3,"sources":["components/section/Section.js","components/notification/Notification.js","components/statistics/Statistics.js","components/feedback/FeedbackOptions.js","App.js","index.js"],"names":["Section","this","props","title","children","className","Component","defaultProps","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","map","option","onClick","onLeaveFeedback","App","state","increment","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","Object","keys","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAGaA,EAAb,4JACE,WACE,MAA4BC,KAAKC,MAAzBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACf,OACE,0BAASC,UAAU,UAAnB,UACE,oBAAIA,UAAU,QAAd,SAAuBF,IACtBC,SANT,GAA6BE,aAY7BN,EAAQO,aAAe,CACrBJ,MAAO,ICbF,IAAMK,EAAb,4JACE,WACE,OAAO,mBAAGH,UAAU,OAAb,SAAqBJ,KAAKC,MAAMO,cAF3C,GAAkCH,aCCrBI,EAAb,4JACE,WACE,MAA0DT,KAAKC,MAAvDS,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBACnC,OAAOJ,GAAQC,GAAWC,EACxB,gCACE,oBAAGR,UAAU,OAAb,mBACQ,sBAAMA,UAAU,UAAhB,SAA2BM,IAAa,OAEhD,oBAAGN,UAAU,OAAb,sBACW,sBAAMA,UAAU,UAAhB,SAA2BO,OAEtC,oBAAGP,UAAU,OAAb,kBACO,sBAAMA,UAAU,UAAhB,SAA2BQ,OAElC,oBAAGR,UAAU,OAAb,oBACS,sBAAMA,UAAU,UAAhB,SAA2BS,SAEpC,oBAAGT,UAAU,OAAb,+BACqB,IACnB,uBAAMA,UAAU,UAAhB,UAA2BU,IAA3B,aAIJ,cAAC,EAAD,CAAcN,QAAQ,0BAvB5B,GAAgCH,aCDnBU,EAAb,4JACE,WAAU,IAAD,OACP,OACE,qBAAKX,UAAU,mBAAf,SACGJ,KAAKC,MAAMe,QAAQC,KAAI,SAAAC,GACtB,OACE,wBAEEC,QAAS,kBAAM,EAAKlB,MAAMmB,gBAAgBF,IAC1Cd,UAAU,iBAHZ,SAKGc,GAJIA,YAPnB,GAAqCb,aC8CtBgB,G,kNA1CbC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPW,UAAY,SAACL,GACX,EAAKM,SAAL,eAAiBN,EAAS,EAAKI,MAAMJ,GAAU,K,EAGjDO,mBAAqB,kBACnB,EAAKH,MAAMZ,KAAO,EAAKY,MAAMX,QAAU,EAAKW,MAAMV,K,EAEpDc,gCAAkC,WAChC,IAAMb,EAAQ,EAAKY,qBACnB,OAAc,IAAVZ,EACK,EAEFc,KAAKC,MAAyB,IAAlB,EAAKN,MAAMZ,KAAcG,I,4CAG9C,WACE,IAAMG,EAAUa,OAAOC,KAAK9B,KAAKsB,OACjC,OACE,qCACE,cAAC,EAAD,CAASpB,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBc,QAASA,EAASI,gBAAiBpB,KAAKuB,cAE3D,cAAC,EAAD,CAASrB,MAAM,aAAf,SACE,cAAC,EAAD,CACEQ,KAAMV,KAAKsB,MAAMZ,KACjBC,QAASX,KAAKsB,MAAMX,QACpBC,IAAKZ,KAAKsB,MAAMV,IAChBC,MAAOb,KAAKyB,mBACZX,mBAAoBd,KAAK0B,2C,GAnCnBrB,cCFlB0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.49a6725e.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class Section extends Component {\r\n  render() {\r\n    const { title, children } = this.props;\r\n    return (\r\n      <section className=\"section\">\r\n        <h2 className=\"title\">{title}</h2>\r\n        {children}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nSection.defaultProps = {\r\n  title: \"\",\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class Notification extends Component {\r\n  render() {\r\n    return <p className=\"text\">{this.props.message}</p>;\r\n  }\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n","import { Component } from \"react\";\r\nimport { Notification } from \"../notification/Notification\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class Statistics extends Component {\r\n  render() {\r\n    const { good, neutral, bad, total, positivePercentage } = this.props;\r\n    return good || neutral || bad ? (\r\n      <div>\r\n        <p className=\"text\">\r\n          Good: <span className=\"numbers\">{good}</span>{\" \"}\r\n        </p>\r\n        <p className=\"text\">\r\n          Neutral: <span className=\"numbers\">{neutral}</span>\r\n        </p>\r\n        <p className=\"text\">\r\n          Bad: <span className=\"numbers\">{bad}</span>\r\n        </p>\r\n        <p className=\"text\">\r\n          Total: <span className=\"numbers\">{total()}</span>\r\n        </p>\r\n        <p className=\"text\">\r\n          Positive feedback:{\" \"}\r\n          <span className=\"numbers\">{positivePercentage()}%</span>\r\n        </p>\r\n      </div>\r\n    ) : (\r\n      <Notification message=\"No feedback given\" />\r\n    );\r\n  }\r\n}\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.func,\r\n  positivePercentage: PropTypes.func,\r\n};\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class FeedbackOptions extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"buttonsContainer\">\r\n        {this.props.options.map(option => {\r\n          return (\r\n            <button\r\n              key={option}\r\n              onClick={() => this.props.onLeaveFeedback(option)}\r\n              className=\"feedBackButton\"\r\n            >\r\n              {option}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n","import { Component } from \"react\";\r\nimport { Section } from \"./components/section/Section\";\r\nimport { Statistics } from \"./components/statistics/Statistics\";\r\nimport { FeedbackOptions } from \"./components/feedback/FeedbackOptions\";\r\nimport \"./styles.scss\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  increment = (option) => {\r\n    this.setState({ [option]: this.state[option] + 1 });\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    this.state.good + this.state.neutral + this.state.bad;\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const total = this.countTotalFeedback();\r\n    if (total === 0) {\r\n      return 0;\r\n    }\r\n    return Math.round((this.state.good * 100) / total);\r\n  };\r\n\r\n  render() {\r\n    const options = Object.keys(this.state);\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions options={options} onLeaveFeedback={this.increment} />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          <Statistics\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.bad}\r\n            total={this.countTotalFeedback}\r\n            positivePercentage={this.countPositiveFeedbackPercentage}\r\n          ></Statistics>\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}